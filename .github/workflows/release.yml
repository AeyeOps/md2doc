name: Release
permissions:
  contents: write
  id-token: none

on:
  push:
    # Trigger on version tags
    tags:
      - 'v*.*.*'
  # Allow manual triggering of release workflow
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (tag)'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      # Determine version: Use release tag, workflow input, or git ref name
      VERSION: ${{ (github.event_name == 'release' && github.event.release.tag_name) || (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' && github.event.inputs.version) || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release notes generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.20" # Keep specific version for now
          cache: true # Enable Go module caching

      # Pandoc might be needed for packaging steps or future validation
      - name: Install pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Build binaries
        run: |
          TARGETS=("linux_amd64" "windows_amd64" "darwin_amd64")
          for target in "${TARGETS[@]}"; do
            os=${target%%_*}
            arch=${target##*_}
            ext=""
            if [ "$os" = "windows" ]; then ext=".exe"; fi
            GOOS=$os GOARCH=$arch go build -o md2docx-${VERSION}-${os}-${arch}${ext} ./cmd/md2docx
          done
      - name: Prepare release directory
        run: mkdir -p release

      - name: Package Debian (.deb)
        run: |
          sudo apt-get update && sudo apt-get install -y dpkg-dev
          mkdir -p pkgroot/usr/local/bin
          mkdir -p pkgroot/DEBIAN # Create the DEBIAN directory
          cp md2docx-${VERSION}-linux-amd64 pkgroot/usr/local/bin/md2docx
          # Strip 'v' prefix for Debian version standard
          DEB_VERSION=${VERSION#v}
          cat > pkgroot/DEBIAN/control << EOF
          Package: md2docx
          Version: ${DEB_VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Your Name <you@example.com>
          Description: Markdown to DOCX converter
          EOF
          dpkg-deb --build pkgroot md2docx_${VERSION}_amd64.deb
          mv md2docx_${VERSION}_amd64.deb release/md2docx-${VERSION}-linux-amd64.deb

      - name: Package macOS Tarball
        run: |
          tar -czf release/md2docx-${VERSION}-darwin-amd64.tar.gz md2docx-${VERSION}-darwin-amd64

      - name: Package Windows Tarball
        run: |
          zip -j release/md2docx-${VERSION}-windows-amd64.zip md2docx-${VERSION}-windows-amd64.exe

      - name: Create Windows Installer (NSIS)
        run: |
          sudo apt-get install -y nsis
          sed -e "s|\${VERSION}|${VERSION}|g" packaging/windows/installer.nsi > installer.nsi
          # The executable is already in the current directory from the build step
          makensis installer.nsi
          mv "md2docx-${VERSION}-installer.exe" release/
      - name: Generate checksums
        run: |
          sha256sum release/* > release/checksums.txt

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }} # Use the determined version
          name: Release ${{ env.VERSION }}
          generate_release_notes: true
          files: release/* # Upload all files from the release directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
