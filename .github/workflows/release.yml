name: Release
permissions:
  contents: write

on:
  push:
    # Trigger on version tags
    tags:
      - 'v*.*.*'
  # Allow manual triggering of release workflow
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          # Quote version to preserve string and avoid YAML float parsing
          go-version: "1.20"
      - name: Build binaries
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          TARGETS=("linux_amd64" "windows_amd64" "darwin_amd64")
          for target in "${TARGETS[@]}"; do
            os=${target%%_*}
            arch=${target##*_}
            ext=""
            if [ "$os" = "windows" ]; then ext=".exe"; fi
            GOOS=$os GOARCH=$arch go build -o md2docx_${VERSION}_${os}_${arch}${ext} ./cmd/md2docx
          done
      - name: Prepare release directory
        run: mkdir -p release

      - name: Package Debian (.deb)
        run: |
          sudo apt-get update && sudo apt-get install -y dpkg-dev
          mkdir -p pkgroot/usr/local/bin
          cp md2docx_${VERSION}_linux_amd64 pkgroot/usr/local/bin/md2docx
          cat > pkgroot/DEBIAN/control << EOF
          Package: md2docx
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Your Name <you@example.com>
          Description: Markdown to DOCX converter
          EOF
          dpkg-deb --build pkgroot md2docx_${VERSION}_amd64.deb
          mv md2docx_${VERSION}_amd64.deb release/

      - name: Package macOS Tarball
        run: |
          tar -czf release/md2docx_${VERSION}_darwin_amd64.tar.gz md2docx_${VERSION}_darwin_amd64

      - name: Package Windows Tarball
        run: |
          zip -j release/md2docx_${VERSION}_windows_amd64.zip md2docx_${VERSION}_windows_amd64.exe

      - name: Create Windows Installer (NSIS)
        run: |
          sudo apt-get install -y nsis
          sed -e "s|\\$VERSION|${VERSION}|g" packaging/windows/installer.nsi > installer.nsi
          cp md2docx_${VERSION}_windows_amd64.exe .
          makensis installer.nsi
          mv "md2docx-${VERSION}-installer.exe" release/
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          # Use the pushed tag name
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        uses: actions/setup-gh-cli@v2

      - name: Upload Release Assets
        run: |
          gh release upload ${{ github.ref_name }} release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}